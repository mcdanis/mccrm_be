// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

// migration run = npx prisma migrate dev --name init
// run every changes in schema.prisma = npx prisma generate

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// MIGRATION

model User {
  id        Int      @id @default(autoincrement())
  name      String
  email     String   @unique
  title     String
  role      String
  password  String
  client_id Int
  client      Client @relation(fields: [client_id], references: [id])
  createdAt DateTime @default(now())
}

model Client {
    id  Int @id @default(autoincrement())
    name String
    email String @unique
    address String
    industry String
    phone_number String
    status String @db.VarChar(2)
    createdAt DateTime @default(now())
    user    User[]
}

model Campaign {
  id  Int @id @default(autoincrement())
  name String @db.VarChar(50)
  client_id Int
  status String @db.VarChar(2)
  created_by Int
  createdAt DateTime @default(now())
  subCampaigns Sub_Campaign[]
}

model Sub_Campaign {
  id  Int @id @default(autoincrement())
  campaign_id Int
  name String @db.VarChar(50)
  owner Int
  manager Int
  status String @db.VarChar(2)
  client_id Int
  created_by Int
  createdAt DateTime @default(now())
  campaign    Campaign     @relation(fields: [campaign_id], references: [id])
  contacts    Contact[]


}

model Contact {
  id  Int @id @default(autoincrement())
  sub_campaign_id Int
  full_name String @db.VarChar(300)
  email String?
  phone_number String?
  country String @db.VarChar(30)
  company String?
  address String? @db.VarChar(255)
  tag String @db.VarChar(10)
  level_priority String @db.VarChar(2)
  source String?
  website String?
  sosmed String?
  status String @db.VarChar(2)
  result_negotiation String?
  createdAt DateTime @default(now())
  contactBant Contact_Bant? @relation
  contactActivity Contact_Activity[]
  contactNote Contact_Note[]
  contactTimeline Contact_Timeline[]
  contactFinal Contact_final? @relation
  subCampaign      Sub_Campaign @relation(fields: [sub_campaign_id], references: [id])
}

// untuk menyimpan relasi kontak untuk mengetahui kontak ini di buat dari kontak lain kontak apa
model Contact_Parent {
  id Int @id @default(autoincrement())
  parent_contact_id Int
  contact_id Int
  createdAt DateTime @default(now())
}

// menyimpan data customer dari orang/client yang sudah pernah closing
model Customer {
  id Int @id @default(autoincrement())
  contact_id Int
  tag String @db.VarChar(10)
  note String
  createdAt DateTime @default(now())
}
model Contact_Note {
  id  Int @id @default(autoincrement())
  sub_campaign_id Int
  contact_id Int
  note String
  createdAt DateTime @default(now())
  user_id Int
  contact    Contact     @relation(fields: [contact_id], references: [id])
}

model Contact_final {
  id  Int @id @default(autoincrement())
  sub_campaign_id Int
  contact_id Int @unique
  result_negotiation String? @db.Text
  project_name String
  start_date String?
  end_date String?
  deal Int?
  payment_status Int?
  deal_done Int?
  evaluation String? @db.Text
  feedback String? @db.Text
  dorumentation String? @db.Text
  createdAt DateTime @default(now())
  contact    Contact     @relation(fields: [contact_id], references: [id])
}

model Contact_Activity {
  id  Int @id @default(autoincrement())
  contact_id Int
  title String @db.VarChar(50)
  description String
  createdAt DateTime @default(now())
  contact    Contact     @relation(fields: [contact_id], references: [id])
}
model Contact_Bant {
  id  Int @id @default(autoincrement())
  contact_id Int @unique
  lead_type Int
  lead_owner Int
  budget String
  authority String
  need String
  time String
  spesification_project String
  next_step String
  createdAt DateTime @default(now())
  contact    Contact  @relation(fields: [contact_id], references: [id])

}
model Contact_Timeline {
  id  Int @id @default(autoincrement())
  contact_id Int
  sub_campaign_id Int
  title String @db.VarChar(30)
  description String
  type String? @db.VarChar(3)
  createdAt DateTime @default(now())
  contact    Contact     @relation(fields: [contact_id], references: [id])
}
model Campaign_User {
  id  Int @id @default(autoincrement())
  user_id Int
  sub_campaign_id Int
  client_id Int
  createdAt DateTime @default(now())
}